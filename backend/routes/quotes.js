const express = require('express');
const { v4: uuidv4 } = require('uuid');
const router = express.Router();

// POST /api/quotes - Generate new quote
router.post('/', async (req, res) => {
  try {
    const { supabase } = req;
    const { 
      sessionId, 
      customerName,
      customerEmail,
      customerPhone,
      customerCompany,
      dealerInfo, 
      quoteType = 'estimate',
      validityDays = 30,
      notes 
    } = req.body;

    console.log('Quote generation request:', { sessionId, customerName, customerEmail });

    // Get session data
    const { data: session, error: sessionError } = await supabase
      .from('configuration_sessions')
      .select(`
        *,
        configuration_selections (*)
      `)
      .eq('id', sessionId)
      .single();

    if (sessionError || !session) {
      console.error('Session fetch error:', sessionError);
      return res.status(404).json({ error: 'Session not found' });
    }

    console.log('Session found:', session);

    // Get chassis details if selected
    let chassisDetails = null;
    if (session.selected_chassis_id) {
      const { data: chassis } = await supabase
        .from('base_vehicles')
        .select('*')
        .eq('id', session.selected_chassis_id)
        .single();
      chassisDetails = chassis;
    }

    // Get body details if selected
    let bodyDetails = null;
    if (session.selected_body_id) {
      const { data: body } = await supabase
        .from('body_configurations')
        .select('*')
        .eq('id', session.selected_body_id)
        .single();
      bodyDetails = body;
    }

    // Calculate pricing
    const chassisPrice = chassisDetails?.msrp || 0;
    const destinationCharge = 2095;
    const bodyPrice = 0; // Contact for pricing
    const totalPrice = chassisPrice + destinationCharge;

    // Create quote record (quote_number will be auto-generated by database)
    const { data: quote, error: quoteError } = await supabase
      .from('quotes')
      .insert({
        session_id: sessionId,
        customer_name: customerName,
        customer_email: customerEmail,
        customer_phone: customerPhone || null,
        customer_company: customerCompany || null,
        dealer_id: dealerInfo?.id || null,
        quote_type: quoteType,
        base_price: chassisPrice,
        options_price: 0,
        destination_charge: destinationCharge,
        total_price: totalPrice,
        valid_until: new Date(Date.now() + validityDays * 24 * 60 * 60 * 1000),
        notes: notes || null,
        quote_status: 'draft'
      })
      .select()
      .single();

    if (quoteError) {
      console.error('Quote creation error:', quoteError);
      return res.status(500).json({ error: 'Failed to create quote', details: quoteError.message });
    }

    console.log('Quote created successfully:', quote);

    // Create quote line items
    const lineItems = [];
    
    // Add chassis line item
    if (chassisDetails) {
      lineItems.push({
        quote_id: quote.id,
        item_type: 'chassis',
        item_id: chassisDetails.id,
        item_code: chassisDetails.model_code,
        item_name: `${chassisDetails.model_year} Ford ${chassisDetails.model_name}`,
        item_description: `${chassisDetails.wheelbase_inches}" Wheelbase, ${chassisDetails.gvwr_lbs} lbs GVWR`,
        quantity: 1,
        unit_price: chassisPrice,
        total_price: chassisPrice
      });
    }

    // Add body line item
    if (bodyDetails) {
      lineItems.push({
        quote_id: quote.id,
        item_type: 'body',
        item_id: bodyDetails.id,
        item_code: bodyDetails.configuration_code,
        item_name: bodyDetails.configuration_name,
        item_description: `${bodyDetails.passenger_capacity} passengers, ${bodyDetails.wheelchair_positions} wheelchair positions`,
        quantity: 1,
        unit_price: 0,
        total_price: 0
      });
    }

    // Add destination charge line item
    lineItems.push({
      quote_id: quote.id,
      item_type: 'fee',
      item_code: 'DEST_CHARGE',
      item_name: 'Destination Charge',
      item_description: 'Standard destination and delivery charge',
      quantity: 1,
      unit_price: destinationCharge,
      total_price: destinationCharge
    });

    // Insert line items
    if (lineItems.length > 0) {
      const { error: lineItemsError } = await supabase
        .from('quote_line_items')
        .insert(lineItems);

      if (lineItemsError) {
        console.error('Line items creation error:', lineItemsError);
      }
    }

    res.status(201).json({
      success: true,
      data: {
        quoteId: quote.id,
        quoteNumber: quote.quote_number,
        totalAmount: quote.total_price,
        validUntil: quote.valid_until,
        downloadUrl: `${req.protocol}://${req.get('host')}/api/quotes/${quote.id}/pdf`
      }
    });

  } catch (error) {
    console.error('Quote generation error:', error);
    res.status(500).json({ error: 'Internal server error', details: error.message });
  }
});

// GET /api/quotes/:quoteId - Get quote details
router.get('/:quoteId', async (req, res) => {
  try {
    const { supabase } = req;
    const { quoteId } = req.params;

    const { data: quote, error } = await supabase
      .from('quotes')
      .select(`
        *,
        quote_line_items (*)
      `)
      .eq('id', quoteId)
      .single();

    if (error) {
      console.error('Quote fetch error:', error);
      return res.status(404).json({ error: 'Quote not found' });
    }

    res.json({
      success: true,
      data: quote
    });

  } catch (error) {
    console.error('Quote detail route error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// GET /api/quotes/:quoteId/pdf - Download quote as PDF
router.get('/:quoteId/pdf', async (req, res) => {
  try {
    const htmlPdf = require('html-pdf-node');
    const { supabase } = req;
    const { quoteId } = req.params;

    console.log('PDF generation request for quote:', quoteId);

    // Get quote with line items (simplified query)
    const { data: quote, error } = await supabase
      .from('quotes')
      .select(`
        *,
        quote_line_items (*)
      `)
      .eq('id', quoteId)
      .single();

    if (error) {
      console.error('Quote lookup error:', error);
      return res.status(404).json({ error: 'Quote not found' });
    }

    console.log('Quote found:', quote.quote_number);

    // Get session details separately
    let sessionDetails = null;
    if (quote.session_id) {
      const { data: session } = await supabase
        .from('configuration_sessions')
        .select('*')
        .eq('id', quote.session_id)
        .single();
      sessionDetails = session;
    }

    // Get chassis and body details
    let chassisDetails = null;
    let bodyDetails = null;

    if (sessionDetails?.selected_chassis_id) {
      const { data: chassis } = await supabase
        .from('base_vehicles')
        .select('*')
        .eq('id', sessionDetails.selected_chassis_id)
        .single();
      chassisDetails = chassis;
    }

    if (sessionDetails?.selected_body_id) {
      const { data: body } = await supabase
        .from('body_configurations')
        .select('*')
        .eq('id', sessionDetails.selected_body_id)
        .single();
      bodyDetails = body;
    }

    console.log('Chassis details:', chassisDetails?.model_name);
    console.log('Body details:', bodyDetails?.model_name);

    // Generate HTML content
    const htmlContent = generateQuoteHTML({
      quote,
      chassisDetails,
      bodyDetails,
      sessionDetails,
      lineItems: quote.quote_line_items || []
    });

    // Generate PDF
    const options = {
      format: 'A4',
      margin: {
        top: '20mm',
        bottom: '20mm',
        left: '15mm',
        right: '15mm'
      },
      printBackground: true
    };

    const file = { content: htmlContent };
    const pdfBuffer = await htmlPdf.generatePdf(file, options);

    // Set response headers for PDF download
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="Endera_Quote_${quote.quote_number}.pdf"`);
    res.setHeader('Content-Length', pdfBuffer.length);

    // Send PDF
    res.send(pdfBuffer);

  } catch (error) {
    console.error('Quote PDF route error:', error);
    res.status(500).json({ error: 'Failed to generate PDF', details: error.message });
  }
});

module.exports = router;

function generateQuoteHTML({ quote, chassisDetails, bodyDetails, lineItems }) {
  const quoteDate = new Date(quote.created_at).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  const validUntil = new Date(quote.valid_until).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Endera Vehicle Quote - ${quote.quote_number}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            background: white;
        }
        
        .header {
            background: linear-gradient(135deg, #7c3aed 0%, #a855f7 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .logo {
            font-size: 36px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .tagline {
            font-size: 14px;
            opacity: 0.9;
        }
        
        .quote-info {
            display: flex;
            justify-content: space-between;
            padding: 20px 30px;
            background: #f8fafc;
            border-bottom: 2px solid #e2e8f0;
        }
        
        .quote-details h2 {
            color: #7c3aed;
            margin-bottom: 5px;
        }
        
        .content {
            padding: 30px;
        }
        
        .section {
            margin-bottom: 30px;
        }
        
        .section h3 {
            color: #7c3aed;
            border-bottom: 2px solid #7c3aed;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }
        
        .customer-info {
            background: #f8fafc;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }
        
        .vehicle-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }
        
        .vehicle-card {
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 20px;
            background: #f8fafc;
        }
        
        .vehicle-card h4 {
            color: #7c3aed;
            margin-bottom: 15px;
            font-size: 18px;
        }
        
        .spec-row {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .spec-row:last-child {
            border-bottom: none;
        }
        
        .spec-label {
            font-weight: 600;
            color: #64748b;
        }
        
        .spec-value {
            color: #1e293b;
        }
        
        .pricing-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        .pricing-table th,
        .pricing-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .pricing-table th {
            background: #7c3aed;
            color: white;
            font-weight: 600;
        }
        
        .pricing-table .total-row {
            background: #f1f5f9;
            font-weight: bold;
            font-size: 18px;
        }
        
        .pricing-table .total-row td {
            border-top: 2px solid #7c3aed;
        }
        
        .price {
            text-align: right;
            font-weight: 600;
        }
        
        .contact-pricing {
            color: #7c3aed;
            font-style: italic;
        }
        
        .footer {
            background: #1e293b;
            color: white;
            padding: 30px;
            text-align: center;
            margin-top: 40px;
        }
        
        .footer-grid {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 30px;
            margin-bottom: 20px;
        }
        
        .footer h4 {
            margin-bottom: 10px;
            color: #a855f7;
        }
        
        .disclaimer {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
        }
        
        .disclaimer h4 {
            color: #92400e;
            margin-bottom: 10px;
        }
        
        .disclaimer p {
            color: #92400e;
            font-size: 14px;
        }
        
        @media print {
            .header {
                -webkit-print-color-adjust: exact;
                color-adjust: exact;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">ENDERA</div>
        <div class="tagline">America's only vertically integrated OEM for Class 4 electric shuttles and school buses</div>
    </div>

    <div class="quote-info">
        <div class="quote-details">
            <h2>Quote #${quote.quote_number}</h2>
            <p>Date: ${quoteDate}</p>
            <p>Valid Until: ${validUntil}</p>
        </div>
        <div class="customer-details">
            <h2>Customer Information</h2>
            <p><strong>${quote.customer_name}</strong></p>
            <p>${quote.customer_email}</p>
            ${quote.customer_phone ? `<p>${quote.customer_phone}</p>` : ''}
            ${quote.customer_company ? `<p>${quote.customer_company}</p>` : ''}
        </div>
    </div>

    <div class="content">
        <div class="section">
            <h3>Vehicle Configuration</h3>
            <div class="vehicle-grid">
                ${chassisDetails ? `
                <div class="vehicle-card">
                    <h4>Ford E-Series Chassis</h4>
                    <div class="spec-row">
                        <span class="spec-label">Model:</span>
                        <span class="spec-value">${chassisDetails.model_year} ${chassisDetails.model_name}</span>
                    </div>
                    <div class="spec-row">
                        <span class="spec-label">Model Code:</span>
                        <span class="spec-value">${chassisDetails.model_code}</span>
                    </div>
                    <div class="spec-row">
                        <span class="spec-label">Wheelbase:</span>
                        <span class="spec-value">${chassisDetails.wheelbase_inches}"</span>
                    </div>
                    <div class="spec-row">
                        <span class="spec-label">GVWR:</span>
                        <span class="spec-value">${chassisDetails.gvwr_lbs?.toLocaleString()} lbs</span>
                    </div>
                    <div class="spec-row">
                        <span class="spec-label">Engine:</span>
                        <span class="spec-value">${chassisDetails.engine_description || 'Standard'}</span>
                    </div>
                </div>
                ` : ''}
                
                ${bodyDetails ? `
                <div class="vehicle-card">
                    <h4>Endera Body Configuration</h4>
                    <div class="spec-row">
                        <span class="spec-label">Model:</span>
                        <span class="spec-value">${bodyDetails.configuration_name}</span>
                    </div>
                    <div class="spec-row">
                        <span class="spec-label">Code:</span>
                        <span class="spec-value">${bodyDetails.configuration_code}</span>
                    </div>
                    <div class="spec-row">
                        <span class="spec-label">Passengers:</span>
                        <span class="spec-value">${bodyDetails.passenger_capacity}</span>
                    </div>
                    <div class="spec-row">
                        <span class="spec-label">Wheelchair Positions:</span>
                        <span class="spec-value">${bodyDetails.wheelchair_positions}</span>
                    </div>
                    ${bodyDetails.range_miles ? `
                    <div class="spec-row">
                        <span class="spec-label">Range:</span>
                        <span class="spec-value">${bodyDetails.range_miles} miles</span>
                    </div>
                    ` : ''}
                </div>
                ` : ''}
            </div>
        </div>

        <div class="section">
            <h3>Pricing Breakdown</h3>
            <table class="pricing-table">
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Description</th>
                        <th>Qty</th>
                        <th class="price">Unit Price</th>
                        <th class="price">Total</th>
                    </tr>
                </thead>
                <tbody>
                    ${lineItems.map(item => `
                    <tr>
                        <td>${item.item_name}</td>
                        <td>${item.item_description || ''}</td>
                        <td>${item.quantity}</td>
                        <td class="price">
                            ${item.unit_price > 0 ? `$${item.unit_price.toLocaleString()}` : '<span class="contact-pricing">Contact for pricing</span>'}
                        </td>
                        <td class="price">
                            ${item.total_price > 0 ? `$${item.total_price.toLocaleString()}` : '<span class="contact-pricing">Contact for pricing</span>'}
                        </td>
                    </tr>
                    `).join('')}
                    <tr class="total-row">
                        <td colspan="4"><strong>Estimated Total</strong></td>
                        <td class="price"><strong>$${quote.total_price.toLocaleString()}+</strong></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="disclaimer">
            <h4>Important Notes</h4>
            <p>• This quote includes chassis pricing and specifications. Body configuration pricing will be provided upon request by our sales team.</p>
            <p>• Final pricing may vary based on options, customizations, and current market conditions.</p>
            <p>• This quote is valid until ${validUntil}. Please contact us to discuss your specific requirements.</p>
            <p>• Delivery times vary based on configuration and current production schedule.</p>
        </div>

        ${quote.notes ? `
        <div class="section">
            <h3>Additional Notes</h3>
            <p>${quote.notes}</p>
        </div>
        ` : ''}
    </div>

    <div class="footer">
        <div class="footer-grid">
            <div>
                <h4>Contact Sales</h4>
                <p>1-800-ENDERA-1</p>
                <p>sales@enderamotors.com</p>
            </div>
            <div>
                <h4>Support</h4>
                <p>support@enderamotors.com</p>
                <p>www.enderamotors.com/support</p>
            </div>
            <div>
                <h4>Company</h4>
                <p>Endera Motors</p>
                <p>www.enderamotors.com</p>
            </div>
        </div>
        <p>&copy; ${new Date().getFullYear()} Endera Motors. All rights reserved.</p>
    </div>
</body>
</html>
  `;
}

